/* || VARIABLE INITALIZATION 
y1: 12px
y2: 24px
x1: 320/16 rem
x2: 1024/16 rem

v = (100 * (y2 - y1))/(x2 - x1)

r = ((y1 - (v/100) * x1)/16)
*/
 :root {
  /*
  --v: calc((100 * (24 - 12))/(1024 - 320));
  --v: 1.7045vw;
  --r: calc((12 - (var(--v)/100) * 320)/16);
   12 - 5.4544 = 6.5456/16 = 0.4091rem
  */
  --v-vsmall: 1.7045vw;
  --r-vsmall: 0.4091rem;
  --font-size1: clamp(0.75rem, calc(var(--v-vsmall) + var(--r-vsmall)), 1.5rem);
  --color-1: #1B190F;
  --color-2: #423E2C;
  --color-3: #DEDCD5;
  --color-4: #f9f9f9;
  --color-white: #f9f9f9;
  --base-height: 6em;
}

/* || GENERAL STYLES */

html, body {
  margin: 0;
  padding: 0;
  font-family: 'Futura PT';
  background-color: var(--color-4);
  color: var(--color-1);
  font-size: 100%;
}

body {  
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  z-index: 0;
  margin: 0;
  height: 100%;
}

header {
  top: var(--base-height);
  height: 40vw;
  background-color: var(--color-1);
  z-index: 2;
}

nav {
  width: 100%;
  display: flex;
  align-self: flex-start;
  justify-content: space-between;
  align-items: center;
  height: var(--base-height);
  background-color: var(--color-1);
  z-index: 10;
}

main {
  background-color: transparent;
  height: 80em;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}

ul {
  width: 33%;
  list-style-type: none;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}

li {
  list-style-type: none;
}

h1 {
  color: var(--color-4);
  font-weight: Heavy;
  font-size: 20vw;
  line-height: 39.5vw;
  text-align: center;
}

h2 {
  font-size: 3.5rem;
  font-weight: 400;
  color: var(--color-4);
  text-align: center;
}

h3 {
  font-size: 3rem;
  font-weight: 600;
  color: var(--color-1);
  text-align: center;
}

h4 {
  font-size: 2em;
  font-weight: 600;
}

p {
  font-size: 2.25rem;
}

a {
  text-decoration: none;
  color: var(--color-4);
  font-size: var(--font-size1);
  font-weight: 700;
}

button {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  height: 2em;
  margin: 0px;
  background-color: transparent;
}

button, input[type="submit"], input[type="reset"] {
  background: none;
  color: inherit;
  border: none;
  padding: 0;
  font: inherit;
  cursor: pointer;
  outline: inherit;
}

/* || UTILITIES */

/* || NAVBAR CLASSES */
.sticky {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
}
.contact-container {
  padding-right: 9%;
}

.logo-container {
  width: 7.5em;
  height: 7.5em;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding-left: 9%;
}

/* || TEXT CLASSES */

#hero-section {
  left: 0;
  width: 100%;
  background-image: url("https://assets.codepen.io/7691942/Home-Hero.svg");
  background-color: transparent; /* Used if the image is unavailable */
  height: 80vmax; /* You must set a specified height */
  background-position: center; /* Center the image */
  background-repeat: no-repeat; /* Do not repeat the image */
  background-size: cover; /* Resize the background image to cover the entire container */
}

#hero-container {
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding-top: 10em;
}

/* || MAIN CLASSES */

.hero-link {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
}

.button-left {
  display: flex;
  justify-content: center;
  align-items: center;
  border: solid black 4px;
  height: 4em;
  background-color: transparent;
  padding: 0 1em 0 1em;
}

.button-right {
  position: relative;
  left: -.24em;
  display: flex;
  justify-content: center;
  align-items: center;
  border: solid black 4px;
  height: 4em;
  width: 4em;
  background-color: transparent;
}

/* || FOOTER CLASSES */
footer {
background-image: url("https://assets.codepen.io/7691942/Home-Footer-1.svg");  left: 0;
  width: 100%;
  background-color: transparent; /* Used if the image is unavailable */
  height: 85em; /* You must set a specified height */
  background-position: center; /* Center the image */
  background-repeat: no-repeat; /* Do not repeat the image */
  background-size: cover; /* Resize the background image to cover the entire container */
}

#footer-section {
  background-color: var(--color-white);
  width: 100%;
  height: var(--base-height);
}

#contact-bar {
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
  align-items: center;
}

.contact-links {
  padding-left: calc(var(--base-height)/2);
}

/* || 12 COLUMN GRID SETUP*/

.grid {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  grid-gap: 12px;
}

[class*="col-"]  {
  /*put anything you need for ALL column classes here*/
}
.col-1 {
  grid-column: span 1;
}
.col-2 {
  grid-column: span 2;
}
.col-3 {
  grid-column: span 3;
}
.col-4 {
  grid-column: span 4;
}
.col-5 {
  grid-column: span 5;
}
.col-6 {
  grid-column: span 6;
}
.col-7 {
  grid-column: span 7;
}
.col-8 {
  grid-column: span 8;
}
.col-9 {
  grid-column: span 9;
}
.col-10 {
  grid-column: span 10;
}
.col-11 {
  grid-column: span 11;
}
.col-12 {
  grid-column: span 12;
}

/*old way of doing responsive typography*/
/*Fixed minimum value below min breakpoint */
.fluid {
  font-size: 32px;
}

/*Fluid value from 568px to 768px*/
@media screen and (min-width: 568px) {
  .fluid {
    font-size: calc(32px + 16 * ((100vw - 568px) / (768 - 568)));
  }
}

/*Fixed Maximum value above the maximum breakpoint*/
@media screen and (min-width: 768px) {
  .fluid {
    font-size: 48px;
  }
}

/*Improved clamp*/
/*clamp([value-min], [value-preferred], [value-max]);

isn't in use by internet explorer so you can write a fallback value before the clamp function

font-size: [fallback]

y1: minimum font size
y2: maximum font size
x1: minimum viewport width
x2: maximum viewport width

How to find viewport width 'v'

v = (100 * (y2 - y1))/(x2 - x1)

v is in vw units


How to find the relative size 'r'

r = y1 - (v/100) * x1

r result is in pixels, so convert to rem

px/16 = rem value

end result should be 
font-size: clamp(y1, v + r, y2);

font-size: clamp(2rem, 4vw + 1rem, 3rem);



Here are my media sizes per Google:
Mobile S: 320 px

Laptop: 1024 px

y1: 12px
y2: 24px
x1: 320/16 rem
x2: 1024/16 rem

v = (100 * (y2 - y1))/(x2 - x1)

r = (y1 - (v/100) * x1)/16

*/
